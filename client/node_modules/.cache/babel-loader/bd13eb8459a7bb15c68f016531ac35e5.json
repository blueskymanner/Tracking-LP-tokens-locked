{"ast":null,"code":"// import React, {useEffect, useState} from \"react\";\nimport { ethers } from \"ethers\";\nimport unicryptETHabi from \"../abi/unicryptETH_abi.json\";\nimport uniswapETHabi from \"../abi/uniswapETH_abi.json\";\nimport BigNumber from \"bignumber.js\";\nimport { createClient } from 'urql'; // import Axios from \"axios\";\n\nconst unicryptAddressETH = \"0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214\"; // const unicryptAddressBSC = \"0xC765bddB93b0D1c1A88282BA0fa6B2d00E3e0c83\";\n\nasync function UnicryptETH() {\n  let provider = ethers.getDefaultProvider();\n  const unicryptETHPortal = new ethers.Contract(unicryptAddressETH, unicryptETHabi, provider);\n  let total_tokenNums = await unicryptETHPortal.getNumLockedTokens();\n  const APIURL = 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2';\n  const ethpriceQuery = `\n      query {\n        bundle(id: \"1\" ) {\n          ethPrice\n        }\n      }\n    `;\n  const client = createClient({\n    url: APIURL\n  });\n  const ethData = await client.query(ethpriceQuery).toPromise();\n  let ethPrice = ethData.data.bundle.ethPrice;\n  let tokenAddr = [];\n  const uniswapETHPortal = [];\n  let token0Addr = [];\n  let token1Addr = [];\n  let LPdecimals = [];\n  const tokensQuery0 = [];\n  const tokensQuery1 = [];\n  const tokenData0 = [];\n  let decimals0 = [];\n  let token0Symbol = [];\n  let token0DerivedETH = [];\n  const tokenData1 = [];\n  let decimals1 = [];\n  let token1Symbol = [];\n  let token1DerivedETH = [];\n  let tokenReserves = [];\n  let tokenLockdata = [];\n  let total_supply = [];\n  let percentage = [];\n  let token0Price = [];\n  let token1Price = [];\n  let period = [];\n  let tokensinfo = [];\n\n  for (let i = 0; i < 10; i++) {\n    tokenAddr[i] = await unicryptETHPortal.getLockedTokenAtIndex(total_tokenNums - i - 1);\n    uniswapETHPortal[i] = new ethers.Contract(tokenAddr[i], uniswapETHabi, provider);\n    token0Addr[i] = await uniswapETHPortal[i].token0();\n    token1Addr[i] = await uniswapETHPortal[i].token1();\n    LPdecimals[i] = await uniswapETHPortal[i].decimals(); // let apiurl = `https://api.coingecko.com/api/v3/coins/ethereum/contract/${token1Addr}`;\n    // const { data: datainfo } = await Axios.get(apiurl);\n    // console.log(datainfo.market_data.current_price.usd);\n\n    tokensQuery0[i] = `\n        query {\n          token(id: \"${token0Addr[i].toLowerCase()}\"){\n            symbol\n            decimals\n            derivedETH\n          }\n        }\n      `;\n    tokensQuery1[i] = `\n        query {\n          token(id: \"${token1Addr[i].toLowerCase()}\"){\n            symbol\n            decimals\n            derivedETH\n          }\n        }\n      `;\n    tokenData0[i] = await client.query(tokensQuery0[i]).toPromise();\n    decimals0[i] = tokenData0[i].data.token.decimals;\n    token0Symbol[i] = tokenData0[i].data.token.symbol;\n    token0DerivedETH[i] = tokenData0[i].data.token.derivedETH;\n    tokenData1[i] = await client.query(tokensQuery1[i]).toPromise();\n    decimals1[i] = tokenData1[i].data.token.decimals;\n    token1Symbol[i] = tokenData1[i].data.token.symbol;\n    token1DerivedETH[i] = tokenData1[i].data.token.derivedETH;\n    tokenReserves[i] = await uniswapETHPortal[i].getReserves();\n    tokenLockdata[i] = await unicryptETHPortal.tokenLocks(tokenAddr[i], 0);\n    total_supply[i] = await uniswapETHPortal[i].totalSupply();\n    percentage[i] = new BigNumber(tokenLockdata[i][1]._hex).dividedBy(new BigNumber(10).pow(LPdecimals[i])).dividedBy(new BigNumber(total_supply[i]._hex).dividedBy(new BigNumber(10).pow(LPdecimals[i])));\n    token0Price[i] = new BigNumber(tokenReserves[i][0]._hex).dividedBy(new BigNumber(10).pow(decimals0[i])).multipliedBy(new BigNumber(token0DerivedETH[i])).multipliedBy(new BigNumber(ethPrice));\n    token1Price[i] = new BigNumber(tokenReserves[i][1]._hex).dividedBy(new BigNumber(10).pow(decimals1[i])).multipliedBy(new BigNumber(token1DerivedETH[i])).multipliedBy(new BigNumber(ethPrice));\n    period[i] = new BigNumber(tokenLockdata[i][3]._hex).minus(new BigNumber(tokenLockdata[i][0]._hex)).dividedBy(new BigNumber(86400));\n    tokensinfo.push({\n      tokenName: token0Symbol[i] + \" / \" + token1Symbol[i],\n      blockchain: \"Ethereum\",\n      lockedPrice: \"$\" + token0Price[i].plus(token1Price[i]).multipliedBy(percentage[i]).toFormat(0),\n      lockedAmount: new BigNumber(tokenLockdata[i][1]._hex).dividedBy(new BigNumber(10).pow(LPdecimals[i])).toFormat(4) + \" (\" + percentage[i].multipliedBy(new BigNumber(100)).toFormat(1) + \"%)\",\n      unlockPeriod: period[i].toFormat(0) + \"days\",\n      locker: \"Unicrypt\",\n      marketCap: \"$\" + token0Price[i].plus(token1Price[i]).toFormat(0),\n      rank: \" \",\n      score: token0Price[i].plus(token1Price[i]).multipliedBy(percentage[i]).multipliedBy(period[i]).multipliedBy(percentage[i]).toFormat(0)\n    });\n  }\n\n  return tokensinfo;\n}\n\n_c = UnicryptETH;\nexport default UnicryptETH; // import React, {useEffect, useState} from \"react\";\n// import { ethers } from \"ethers\";\n// import unicryptETHabi from \"../abi/unicrypt_abi.json\";\n//     const unicryptAddressETH = \"0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214\";\n//     const get_gFees = async () => {\n//         let provider = ethers.getDefaultProvider();\n//         const gFeesPortal = new ethers.Contract(unicryptAddressETH, unicryptETHabi, provider);\n//         const gFees = await gFeesPortal.getNumLockedTokens();\n//         return gFees;\n//     }\n// export default get_gFees;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnicryptETH\");","map":{"version":3,"sources":["D:/My Data/backup/GIT/Tracking-LP-tokens-locked/src/Table/getdata.js"],"names":["ethers","unicryptETHabi","uniswapETHabi","BigNumber","createClient","unicryptAddressETH","UnicryptETH","provider","getDefaultProvider","unicryptETHPortal","Contract","total_tokenNums","getNumLockedTokens","APIURL","ethpriceQuery","client","url","ethData","query","toPromise","ethPrice","data","bundle","tokenAddr","uniswapETHPortal","token0Addr","token1Addr","LPdecimals","tokensQuery0","tokensQuery1","tokenData0","decimals0","token0Symbol","token0DerivedETH","tokenData1","decimals1","token1Symbol","token1DerivedETH","tokenReserves","tokenLockdata","total_supply","percentage","token0Price","token1Price","period","tokensinfo","i","getLockedTokenAtIndex","token0","token1","decimals","toLowerCase","token","symbol","derivedETH","getReserves","tokenLocks","totalSupply","_hex","dividedBy","pow","multipliedBy","minus","push","tokenName","blockchain","lockedPrice","plus","toFormat","lockedAmount","unlockPeriod","locker","marketCap","rank","score"],"mappings":"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","sourcesContent":["// import React, {useEffect, useState} from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport unicryptETHabi from \"../abi/unicryptETH_abi.json\";\r\nimport uniswapETHabi from \"../abi/uniswapETH_abi.json\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport { createClient } from 'urql'\r\n// import Axios from \"axios\";\r\n\r\nconst unicryptAddressETH = \"0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214\";\r\n// const unicryptAddressBSC = \"0xC765bddB93b0D1c1A88282BA0fa6B2d00E3e0c83\";\r\n\r\nasync function UnicryptETH() {\r\n  \r\n    let provider = ethers.getDefaultProvider();\r\n    const unicryptETHPortal = new ethers.Contract(unicryptAddressETH, unicryptETHabi, provider);\r\n    let total_tokenNums = await unicryptETHPortal.getNumLockedTokens();\r\n  \r\n    const APIURL = 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2';\r\n    const ethpriceQuery = `\r\n      query {\r\n        bundle(id: \"1\" ) {\r\n          ethPrice\r\n        }\r\n      }\r\n    `; \r\n    const client = createClient({\r\n      url: APIURL,\r\n    });\r\n    const ethData = await client.query(ethpriceQuery).toPromise();\r\n    let ethPrice = ethData.data.bundle.ethPrice;\r\n  \r\n    let tokenAddr = [];\r\n    const uniswapETHPortal = [];\r\n    let token0Addr = [];\r\n    let token1Addr = [];\r\n    let LPdecimals = [];\r\n    const tokensQuery0 = [];\r\n    const tokensQuery1 = [];\r\n    const tokenData0 = [];\r\n    let decimals0 = [];\r\n    let token0Symbol = [];\r\n    let token0DerivedETH = [];\r\n    const tokenData1 = [];\r\n    let decimals1 = [];\r\n    let token1Symbol = [];\r\n    let token1DerivedETH = [];\r\n    let tokenReserves = [];\r\n    let tokenLockdata = [];\r\n    let total_supply = [];\r\n    let percentage = [];\r\n    let token0Price = [];\r\n    let token1Price = [];\r\n    let period = [];\r\n  \r\n    let tokensinfo = [];\r\n  \r\n    for (let i = 0; i < 10; i++) {\r\n      tokenAddr[i] = await unicryptETHPortal.getLockedTokenAtIndex(total_tokenNums - i - 1);\r\n  \r\n      uniswapETHPortal[i] = new ethers.Contract(tokenAddr[i], uniswapETHabi, provider);\r\n      token0Addr[i] = await uniswapETHPortal[i].token0();\r\n      token1Addr[i] = await uniswapETHPortal[i].token1();\r\n      LPdecimals[i] = await uniswapETHPortal[i].decimals();\r\n  \r\n      // let apiurl = `https://api.coingecko.com/api/v3/coins/ethereum/contract/${token1Addr}`;\r\n      // const { data: datainfo } = await Axios.get(apiurl);\r\n      // console.log(datainfo.market_data.current_price.usd);\r\n  \r\n      tokensQuery0[i] = `\r\n        query {\r\n          token(id: \"${token0Addr[i].toLowerCase()}\"){\r\n            symbol\r\n            decimals\r\n            derivedETH\r\n          }\r\n        }\r\n      `;\r\n      tokensQuery1[i] = `\r\n        query {\r\n          token(id: \"${token1Addr[i].toLowerCase()}\"){\r\n            symbol\r\n            decimals\r\n            derivedETH\r\n          }\r\n        }\r\n      `;\r\n\r\n      tokenData0[i] = await client.query(tokensQuery0[i]).toPromise();\r\n      decimals0[i] = tokenData0[i].data.token.decimals;\r\n      token0Symbol[i] = tokenData0[i].data.token.symbol;\r\n      token0DerivedETH[i] = tokenData0[i].data.token.derivedETH;\r\n\r\n      tokenData1[i] = await client.query(tokensQuery1[i]).toPromise();\r\n      decimals1[i] = tokenData1[i].data.token.decimals;\r\n      token1Symbol[i] = tokenData1[i].data.token.symbol;\r\n      token1DerivedETH[i] = tokenData1[i].data.token.derivedETH;\r\n      \r\n      tokenReserves[i] = await uniswapETHPortal[i].getReserves();\r\n      tokenLockdata[i] = await unicryptETHPortal.tokenLocks(tokenAddr[i], 0);\r\n      total_supply[i] = await uniswapETHPortal[i].totalSupply();\r\n\r\n      percentage[i] = new BigNumber(tokenLockdata[i][1]._hex).dividedBy(new BigNumber(10).pow(LPdecimals[i])).dividedBy(new BigNumber(total_supply[i]._hex).dividedBy(new BigNumber(10).pow(LPdecimals[i])));\r\n      token0Price[i] = new BigNumber(tokenReserves[i][0]._hex).dividedBy(new BigNumber(10).pow(decimals0[i])).multipliedBy(new BigNumber(token0DerivedETH[i])).multipliedBy(new BigNumber(ethPrice));\r\n      token1Price[i] = new BigNumber(tokenReserves[i][1]._hex).dividedBy(new BigNumber(10).pow(decimals1[i])).multipliedBy(new BigNumber(token1DerivedETH[i])).multipliedBy(new BigNumber(ethPrice));\r\n      period[i] = new BigNumber(tokenLockdata[i][3]._hex).minus(new BigNumber(tokenLockdata[i][0]._hex)).dividedBy(new BigNumber(86400));\r\n\r\n      tokensinfo.push({ tokenName: token0Symbol[i] + \" / \" + token1Symbol[i], \r\n                        blockchain: \"Ethereum\",\r\n                        lockedPrice: \"$\" + token0Price[i].plus(token1Price[i]).multipliedBy(percentage[i]).toFormat(0), \r\n                        lockedAmount: new BigNumber(tokenLockdata[i][1]._hex).dividedBy(new BigNumber(10).pow(LPdecimals[i])).toFormat(4) + \" (\" + percentage[i].multipliedBy(new BigNumber(100)).toFormat(1) + \"%)\", \r\n                        unlockPeriod: period[i].toFormat(0) + \"days\", \r\n                        locker: \"Unicrypt\", \r\n                        marketCap: \"$\" + token0Price[i].plus(token1Price[i]).toFormat(0), \r\n                        rank: \" \", \r\n                        score: token0Price[i].plus(token1Price[i]).multipliedBy(percentage[i]).multipliedBy(period[i]).multipliedBy(percentage[i]).toFormat(0) });\r\n    }\r\n\r\n    return tokensinfo;\r\n  }\r\n\r\nexport default UnicryptETH;\r\n\r\n\r\n\r\n\r\n// import React, {useEffect, useState} from \"react\";\r\n// import { ethers } from \"ethers\";\r\n// import unicryptETHabi from \"../abi/unicrypt_abi.json\";\r\n\r\n//     const unicryptAddressETH = \"0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214\";\r\n\r\n//     const get_gFees = async () => {\r\n//         let provider = ethers.getDefaultProvider();\r\n\r\n//         const gFeesPortal = new ethers.Contract(unicryptAddressETH, unicryptETHabi, provider);\r\n\r\n//         const gFees = await gFeesPortal.getNumLockedTokens();\r\n        \r\n//         return gFees;\r\n//     }\r\n\r\n\r\n// export default get_gFees;"]},"metadata":{},"sourceType":"module"}