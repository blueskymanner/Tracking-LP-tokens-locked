{"ast":null,"code":"// import React, {useEffect, useState} from \"react\";\nimport getBSCWeb3 from '../utils/getBSCweb3.js';\nimport deepLockerabi from \"../abi/deepLocker_abi.json\";\nimport pancakeswapBSCabi from \"../abi/pancakeswapBSC_abi.json\";\nimport BigNumber from \"bignumber.js\";\nimport multicallBSC from \"./multicallBSC.js\";\nimport { createClient } from 'urql';\nimport Axios from \"axios\";\nconst deepLockerAddr = \"0x3f4D6bf08CB7A003488Ef082102C2e6418a4551e\";\n\nasync function DeepLocker() {\n  const web3 = getBSCWeb3();\n  const deepLockerPortal = new web3.eth.Contract(deepLockerabi, deepLockerAddr);\n  let total_tokenNums = await deepLockerPortal.methods.depositId().call();\n  console.log(total_tokenNums);\n  const APIURL = 'https://api.thegraph.com/subgraphs/name/pancakeswap/pairs';\n  const client = createClient({\n    url: APIURL\n  });\n  let tokenAddrs = [];\n  let tokenLocks = [];\n  let LPtokens = [];\n  let tokensQuery0 = [];\n  let tokenData0 = [];\n  let decimals0 = [];\n  let tokensQuery1 = [];\n  let tokenData1 = [];\n  let decimals1 = [];\n  let apiurl0 = [];\n  let apiurl1 = [];\n  let datainfo0 = [];\n  let datainfo1 = [];\n  let percentage = [];\n  let token0Price = [];\n  let token1Price = [];\n  let period = [];\n  let tokensinfo = [];\n\n  for (let i = 0; i < 2; i++) {\n    tokenLocks.push({\n      address: deepLockerAddr,\n      name: \"lockedToken\",\n      params: [total_tokenNums - i]\n    });\n  }\n\n  const tokenLocksArr = await multicallBSC(deepLockerabi, tokenLocks);\n  console.log(tokenLocksArr[0][0]);\n\n  for (let i = 0; i < tokenLocksArr.length; i++) {\n    LPtokens.push({\n      address: tokenLocksArr[i][0],\n      name: \"token0\"\n    });\n    LPtokens.push({\n      address: tokenLocksArr[i][0],\n      name: \"token1\"\n    });\n    LPtokens.push({\n      address: tokenLocksArr[i][0],\n      name: \"decimals\"\n    });\n    LPtokens.push({\n      address: tokenLocksArr[i][0],\n      name: \"getReserves\"\n    });\n    LPtokens.push({\n      address: tokenLocksArr[i][0],\n      name: \"totalSupply\"\n    });\n  }\n\n  const LPtokensArr = await multicallBSC(pancakeswapBSCabi, LPtokens);\n  console.log(LPtokensArr);\n\n  for (let i = 0; i < tokenLocksArr.length; i++) {\n    apiurl0[i] = `https://api.pancakeswap.info/api/v2/tokens/${LPtokensArr[i * 5][0]}`;\n    await Axios.get(apiurl0[i]).then(entry => datainfo0.push(entry));\n    apiurl1[i] = `https://api.pancakeswap.info/api/v2/tokens/${LPtokensArr[i * 5 + 1][0]}`;\n    await Axios.get(apiurl1[i]).then(entry => datainfo1.push(entry));\n    tokensQuery0[i] = `\n        query {\n          token(id: \"${LPtokensArr[i * 5][0].toLowerCase()}\"){\n            decimals\n          }\n        }\n        `;\n    tokensQuery1[i] = `\n        query {\n          token(id: \"${LPtokensArr[i * 5 + 1][0].toLowerCase()}\"){\n            decimals\n          }\n        }\n        `;\n    tokenData0[i] = await client.query(tokensQuery0[i]).toPromise();\n    decimals0[i] = tokenData0[i].data.token.decimals;\n    tokenData1[i] = await client.query(tokensQuery1[i]).toPromise();\n    decimals1[i] = tokenData1[i].data.token.decimals;\n    percentage[i] = new BigNumber(tokenLocksArr[i][1]._hex).dividedBy(10 ** LPtokensArr[i * 5 + 2][0]).dividedBy(new BigNumber(LPtokensArr[i * 5 + 4][0]._hex).dividedBy(10 ** LPtokensArr[i * 5 + 2][0]));\n  }\n}\n\n_c = DeepLocker;\nexport default DeepLocker;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeepLocker\");","map":{"version":3,"sources":["D:/My Data/backup/GIT/Tracking-LP-tokens-locked/src/Table/deepLocker.js"],"names":["getBSCWeb3","deepLockerabi","pancakeswapBSCabi","BigNumber","multicallBSC","createClient","Axios","deepLockerAddr","DeepLocker","web3","deepLockerPortal","eth","Contract","total_tokenNums","methods","depositId","call","console","log","APIURL","client","url","tokenAddrs","tokenLocks","LPtokens","tokensQuery0","tokenData0","decimals0","tokensQuery1","tokenData1","decimals1","apiurl0","apiurl1","datainfo0","datainfo1","percentage","token0Price","token1Price","period","tokensinfo","i","push","address","name","params","tokenLocksArr","length","LPtokensArr","get","then","entry","toLowerCase","query","toPromise","data","token","decimals","_hex","dividedBy"],"mappings":"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","sourcesContent":["// import React, {useEffect, useState} from \"react\";\r\nimport getBSCWeb3 from '../utils/getBSCweb3.js';\r\nimport deepLockerabi from \"../abi/deepLocker_abi.json\";\r\nimport pancakeswapBSCabi from \"../abi/pancakeswapBSC_abi.json\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport multicallBSC from \"./multicallBSC.js\";\r\nimport { createClient } from 'urql'\r\nimport Axios from \"axios\";\r\n\r\nconst deepLockerAddr = \"0x3f4D6bf08CB7A003488Ef082102C2e6418a4551e\";\r\n\r\nasync function DeepLocker() {\r\n\r\n    const web3 = getBSCWeb3();\r\n    const deepLockerPortal = new web3.eth.Contract(deepLockerabi, deepLockerAddr);\r\n    let total_tokenNums = await deepLockerPortal.methods.depositId().call();\r\n    console.log(total_tokenNums);\r\n\r\n    const APIURL = 'https://api.thegraph.com/subgraphs/name/pancakeswap/pairs';\r\n\r\n    const client = createClient({\r\n        url: APIURL,\r\n    });\r\n\r\n\r\n    let tokenAddrs = [];\r\n    let tokenLocks = [];\r\n    let LPtokens = [];\r\n\r\n    let tokensQuery0 = [];\r\n    let tokenData0 = [];\r\n    let decimals0 = [];\r\n\r\n    let tokensQuery1 = [];\r\n    let tokenData1 = [];\r\n    let decimals1 = [];\r\n\r\n    let apiurl0 = [];\r\n    let apiurl1 = [];\r\n    let datainfo0 = [];\r\n    let datainfo1 = [];\r\n\r\n    let percentage = [];\r\n    let token0Price = [];\r\n    let token1Price = [];\r\n    let period = [];\r\n\r\n    let tokensinfo = [];\r\n\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n        tokenLocks.push({address: deepLockerAddr, name: \"lockedToken\", params: [total_tokenNums-i]});\r\n    }\r\n    const tokenLocksArr = await multicallBSC(deepLockerabi, tokenLocks);\r\n    console.log(tokenLocksArr[0][0]);\r\n\r\n    for (let i = 0; i < tokenLocksArr.length; i++) {\r\n        LPtokens.push({address: tokenLocksArr[i][0], name: \"token0\"});\r\n        LPtokens.push({address: tokenLocksArr[i][0], name: \"token1\"});\r\n        LPtokens.push({address: tokenLocksArr[i][0], name: \"decimals\"});\r\n        LPtokens.push({address: tokenLocksArr[i][0], name: \"getReserves\"});\r\n        LPtokens.push({address: tokenLocksArr[i][0], name: \"totalSupply\"});\r\n    }\r\n    const LPtokensArr = await multicallBSC(pancakeswapBSCabi, LPtokens);\r\n    console.log(LPtokensArr);\r\n\r\n    for (let i = 0; i < tokenLocksArr.length; i++) {\r\n        apiurl0[i] = `https://api.pancakeswap.info/api/v2/tokens/${LPtokensArr[i*5][0]}`;\r\n        await Axios.get(apiurl0[i]).then(entry => \r\n        datainfo0.push(entry));\r\n  \r\n        apiurl1[i] = `https://api.pancakeswap.info/api/v2/tokens/${LPtokensArr[i*5+1][0]}`;\r\n        await Axios.get(apiurl1[i]).then(entry => \r\n        datainfo1.push(entry));\r\n\r\n        tokensQuery0[i] = `\r\n        query {\r\n          token(id: \"${LPtokensArr[i*5][0].toLowerCase()}\"){\r\n            decimals\r\n          }\r\n        }\r\n        `;\r\n        tokensQuery1[i] = `\r\n        query {\r\n          token(id: \"${LPtokensArr[i*5+1][0].toLowerCase()}\"){\r\n            decimals\r\n          }\r\n        }\r\n        `;\r\n\r\n        tokenData0[i] = await client.query(tokensQuery0[i]).toPromise();\r\n        decimals0[i] = tokenData0[i].data.token.decimals;\r\n    \r\n        tokenData1[i] = await client.query(tokensQuery1[i]).toPromise();\r\n        decimals1[i] = tokenData1[i].data.token.decimals;\r\n\r\n        percentage[i] = new BigNumber(tokenLocksArr[i][1]._hex).dividedBy(10**LPtokensArr[i*5+2][0]).dividedBy(new BigNumber(LPtokensArr[i*5+4][0]._hex).dividedBy(10**LPtokensArr[i*5+2][0]));\r\n\r\n\r\n\r\n    \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n}\r\n\r\nexport default DeepLocker;\r\n"]},"metadata":{},"sourceType":"module"}