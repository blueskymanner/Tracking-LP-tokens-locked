{"ast":null,"code":"// import React, {useEffect, useState} from \"react\";\nimport { ethers } from \"ethers\";\nimport unicryptBSCabi from \"../abi/unicryptBSC_abi.json\";\nimport pancakeswapBSCabi from \"../abi/pancakeswapBSC_abi.json\";\nimport BigNumber from \"bignumber.js\";\nimport { createClient } from 'urql';\nimport Axios from \"axios\";\nconst unicryptAddressBSC = \"0xC765bddB93b0D1c1A88282BA0fa6B2d00E3e0c83\";\n\nasync function UnicryptBSC() {\n  let provider; // // const [accounts] = await window.ethereum.request({ method:'eth_requestAccounts' });\n  // // window.ethereum.send('eth_sendTransaction', { from: accounts[0], /* ... */ });\n  // // await window.ethereum.enable();\n  // provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n  // await provider.send('eth_requestAccounts', []);\n  // signer = provider.getSigner(); // remove this\n  // unicryptBSCPortal = new ethers.Contract(unicryptAddressBSC, unicryptBSCabi, signer); // replace signer with provider\n  // total_tokenNums = await unicryptBSCPortal.getNumLockedTokens();\n\n  const {\n    ethereum\n  } = window;\n\n  if (ethereum) {\n    provider = new ethers.providers.Web3Provider(ethereum);\n  }\n\n  const unicryptBSCPortal = new ethers.Contract(unicryptAddressBSC, unicryptBSCabi, provider); // replace signer with provider\n\n  let total_tokenNums = await unicryptBSCPortal.getNumLockedTokens();\n  const APIURL = 'https://api.thegraph.com/subgraphs/name/pancakeswap/pairs';\n  const client = createClient({\n    url: APIURL\n  });\n  let tokenAddr = [];\n  const pancakeswapBSCPortal = [];\n  let token0Addr = [];\n  let token1Addr = [];\n  let LPdecimals = [];\n  let apiurl0 = [];\n  let apiurl1 = [];\n  let datainfo0 = [];\n  let datainfo1 = [];\n  const tokensQuery0 = [];\n  const tokensQuery1 = [];\n  const tokenData0 = [];\n  let decimals0 = [];\n  const tokenData1 = [];\n  let decimals1 = [];\n  let tokenReserves = [];\n  let tokenLockdata = [];\n  let total_supply = [];\n  let percentage = [];\n  let token0Price = [];\n  let token1Price = [];\n  let period = [];\n  let tokensinfo = []; // console.log('getting bsc token info.....');\n\n  for (let i = 0; i < 2; i++) {\n    tokenAddr[i] = await unicryptBSCPortal.getLockedTokenAtIndex(total_tokenNums - i - 1);\n    pancakeswapBSCPortal[i] = new ethers.Contract(tokenAddr[i], pancakeswapBSCabi, provider);\n    token0Addr[i] = await pancakeswapBSCPortal[i].token0();\n    token1Addr[i] = await pancakeswapBSCPortal[i].token1();\n    LPdecimals[i] = await pancakeswapBSCPortal[i].decimals();\n    console.log('token pair info fetched.');\n    apiurl0[i] = `https://api.pancakeswap.info/api/v2/tokens/${token0Addr[i]}`;\n    await Axios.get(apiurl0[i]).then(entry => datainfo0.push(entry));\n    apiurl1[i] = `https://api.pancakeswap.info/api/v2/tokens/${token1Addr[i]}`;\n    await Axios.get(apiurl1[i]).then(entry => datainfo1.push(entry));\n    tokensQuery0[i] = `\n        query {\n          token(id: \"${token0Addr[i].toLowerCase()}\"){\n            decimals\n          }\n        }\n      `;\n    tokensQuery1[i] = `\n        query {\n          token(id: \"${token1Addr[i].toLowerCase()}\"){\n            decimals\n          }\n        }\n      `;\n    tokenData0[i] = await client.query(tokensQuery0[i]).toPromise();\n    decimals0[i] = tokenData0[i].data.token.decimals;\n    tokenData1[i] = await client.query(tokensQuery1[i]).toPromise();\n    decimals1[i] = tokenData1[i].data.token.decimals;\n    console.log('query executed.');\n    tokenReserves[i] = await pancakeswapBSCPortal[i].getReserves();\n    tokenLockdata[i] = await unicryptBSCPortal.tokenLocks(tokenAddr[i], 0);\n    total_supply[i] = await pancakeswapBSCPortal[i].totalSupply();\n    console.log('token detail info fetched.');\n    percentage[i] = new BigNumber(tokenLockdata[i][1]._hex).dividedBy(10 ** LPdecimals[i]).dividedBy(new BigNumber(total_supply[i]._hex).dividedBy(10 ** LPdecimals[i]));\n    token0Price[i] = new BigNumber(tokenReserves[i][0]._hex).dividedBy(10 ** decimals0[i]).multipliedBy(new BigNumber(datainfo0[i].data.data.price));\n    token1Price[i] = new BigNumber(tokenReserves[i][1]._hex).dividedBy(10 ** decimals1[i]).multipliedBy(new BigNumber(datainfo1[i].data.data.price));\n    period[i] = new BigNumber(tokenLockdata[i][3]._hex).minus(new BigNumber(tokenLockdata[i][0]._hex)).dividedBy(86400);\n    tokensinfo.push({\n      tokenName: datainfo0[i].data.data.symbol + \" / \" + datainfo1[i].data.data.symbol,\n      blockchain: \"BSC\",\n      lockedPrice: \"$\" + token0Price[i].plus(token1Price[i]).multipliedBy(percentage[i]).toFormat(0),\n      lockedAmount: new BigNumber(tokenLockdata[i][1]._hex).dividedBy(10 ** LPdecimals[i]).toFormat(2) + \" (\" + percentage[i].multipliedBy(100).toFormat(1) + \"%)\",\n      unlockPeriod: period[i].toFormat(0) + \"days\",\n      locker: \"Unicrypt\",\n      marketCap: \"$\" + token0Price[i].plus(token1Price[i]).toFormat(0),\n      rank: \"-\",\n      score: token0Price[i].plus(token1Price[i]).multipliedBy(percentage[i]).multipliedBy(period[i]).multipliedBy(percentage[i]).toFormat(0)\n    });\n  }\n\n  console.log('retrived bsc token info.....');\n  return tokensinfo;\n}\n\n_c = UnicryptBSC;\nexport default UnicryptBSC;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnicryptBSC\");","map":{"version":3,"sources":["D:/My Data/backup/GIT/Tracking-LP-tokens-locked/src/Table/unicryptBSC.js"],"names":["ethers","unicryptBSCabi","pancakeswapBSCabi","BigNumber","createClient","Axios","unicryptAddressBSC","UnicryptBSC","provider","ethereum","window","providers","Web3Provider","unicryptBSCPortal","Contract","total_tokenNums","getNumLockedTokens","APIURL","client","url","tokenAddr","pancakeswapBSCPortal","token0Addr","token1Addr","LPdecimals","apiurl0","apiurl1","datainfo0","datainfo1","tokensQuery0","tokensQuery1","tokenData0","decimals0","tokenData1","decimals1","tokenReserves","tokenLockdata","total_supply","percentage","token0Price","token1Price","period","tokensinfo","i","getLockedTokenAtIndex","token0","token1","decimals","console","log","get","then","entry","push","toLowerCase","query","toPromise","data","token","getReserves","tokenLocks","totalSupply","_hex","dividedBy","multipliedBy","price","minus","tokenName","symbol","blockchain","lockedPrice","plus","toFormat","lockedAmount","unlockPeriod","locker","marketCap","rank","score"],"mappings":"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","sourcesContent":["// import React, {useEffect, useState} from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport unicryptBSCabi from \"../abi/unicryptBSC_abi.json\";\r\nimport pancakeswapBSCabi from \"../abi/pancakeswapBSC_abi.json\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport { createClient } from 'urql'\r\nimport Axios from \"axios\";\r\n\r\nconst unicryptAddressBSC = \"0xC765bddB93b0D1c1A88282BA0fa6B2d00E3e0c83\";\r\n\r\nasync function UnicryptBSC() {\r\n    let provider;\r\n\r\n        // // const [accounts] = await window.ethereum.request({ method:'eth_requestAccounts' });\r\n        // // window.ethereum.send('eth_sendTransaction', { from: accounts[0], /* ... */ });\r\n        // // await window.ethereum.enable();\r\n        // provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n        // await provider.send('eth_requestAccounts', []);\r\n        // signer = provider.getSigner(); // remove this\r\n        // unicryptBSCPortal = new ethers.Contract(unicryptAddressBSC, unicryptBSCabi, signer); // replace signer with provider\r\n        // total_tokenNums = await unicryptBSCPortal.getNumLockedTokens();\r\n\r\n    const {ethereum} = window;\r\n    if(ethereum) {\r\n        provider = new ethers.providers.Web3Provider(ethereum);\r\n    }\r\n    const unicryptBSCPortal = new ethers.Contract(unicryptAddressBSC, unicryptBSCabi, provider); // replace signer with provider\r\n    let total_tokenNums = await unicryptBSCPortal.getNumLockedTokens();\r\n\r\n    const APIURL = 'https://api.thegraph.com/subgraphs/name/pancakeswap/pairs';\r\n\r\n    const client = createClient({\r\n        url: APIURL,\r\n    });\r\n\r\n    let tokenAddr = [];\r\n    const pancakeswapBSCPortal = [];\r\n    let token0Addr = [];\r\n    let token1Addr = [];\r\n    let LPdecimals = [];\r\n    let apiurl0 = [];\r\n    let apiurl1 = [];\r\n    let datainfo0 = [];\r\n    let datainfo1 = [];\r\n    const tokensQuery0 = [];\r\n    const tokensQuery1 = [];\r\n    const tokenData0 = [];\r\n    let decimals0 = [];\r\n    const tokenData1 = [];\r\n    let decimals1 = [];\r\n    let tokenReserves = [];\r\n    let tokenLockdata = [];\r\n    let total_supply = [];\r\n    let percentage = [];\r\n    let token0Price = [];\r\n    let token1Price = [];\r\n    let period = [];\r\n\r\n    let tokensinfo = [];\r\n    // console.log('getting bsc token info.....');\r\n    for (let i = 0; i < 2; i++) {\r\n        tokenAddr[i] = await unicryptBSCPortal.getLockedTokenAtIndex(total_tokenNums - i - 1);\r\n\r\n        pancakeswapBSCPortal[i] = new ethers.Contract(tokenAddr[i], pancakeswapBSCabi, provider);\r\n        token0Addr[i] = await pancakeswapBSCPortal[i].token0();\r\n        token1Addr[i] = await pancakeswapBSCPortal[i].token1();\r\n        LPdecimals[i] = await pancakeswapBSCPortal[i].decimals();\r\n        console.log('token pair info fetched.');\r\n        apiurl0[i] = `https://api.pancakeswap.info/api/v2/tokens/${token0Addr[i]}`;\r\n        await Axios.get(apiurl0[i]).then(entry => \r\n            datainfo0.push(entry));\r\n\r\n        apiurl1[i] = `https://api.pancakeswap.info/api/v2/tokens/${token1Addr[i]}`;\r\n        await Axios.get(apiurl1[i]).then(entry => \r\n            datainfo1.push(entry));\r\n        tokensQuery0[i] = `\r\n        query {\r\n          token(id: \"${token0Addr[i].toLowerCase()}\"){\r\n            decimals\r\n          }\r\n        }\r\n      `;\r\n        tokensQuery1[i] = `\r\n        query {\r\n          token(id: \"${token1Addr[i].toLowerCase()}\"){\r\n            decimals\r\n          }\r\n        }\r\n      `;\r\n\r\n        tokenData0[i] = await client.query(tokensQuery0[i]).toPromise();\r\n        decimals0[i] = tokenData0[i].data.token.decimals;\r\n\r\n        tokenData1[i] = await client.query(tokensQuery1[i]).toPromise();\r\n        decimals1[i] = tokenData1[i].data.token.decimals;\r\n        console.log('query executed.');\r\n        tokenReserves[i] = await pancakeswapBSCPortal[i].getReserves();\r\n        tokenLockdata[i] = await unicryptBSCPortal.tokenLocks(tokenAddr[i], 0);\r\n        total_supply[i] = await pancakeswapBSCPortal[i].totalSupply();\r\n        console.log('token detail info fetched.');\r\n        percentage[i] = new BigNumber(tokenLockdata[i][1]._hex).dividedBy(10 ** LPdecimals[i]).dividedBy(new BigNumber(total_supply[i]._hex).dividedBy(10 ** LPdecimals[i]));\r\n        token0Price[i] = new BigNumber(tokenReserves[i][0]._hex).dividedBy(10 ** decimals0[i]).multipliedBy(new BigNumber(datainfo0[i].data.data.price));\r\n        token1Price[i] = new BigNumber(tokenReserves[i][1]._hex).dividedBy(10 ** decimals1[i]).multipliedBy(new BigNumber(datainfo1[i].data.data.price));\r\n        period[i] = new BigNumber(tokenLockdata[i][3]._hex).minus(new BigNumber(tokenLockdata[i][0]._hex)).dividedBy(86400);\r\n\r\n        tokensinfo.push({\r\n            tokenName: datainfo0[i].data.data.symbol + \" / \" + datainfo1[i].data.data.symbol,\r\n            blockchain: \"BSC\",\r\n            lockedPrice: \"$\" + token0Price[i].plus(token1Price[i]).multipliedBy(percentage[i]).toFormat(0),\r\n            lockedAmount: new BigNumber(tokenLockdata[i][1]._hex).dividedBy(10 ** LPdecimals[i]).toFormat(2) + \" (\" + percentage[i].multipliedBy(100).toFormat(1) + \"%)\",\r\n            unlockPeriod: period[i].toFormat(0) + \"days\",\r\n            locker: \"Unicrypt\",\r\n            marketCap: \"$\" + token0Price[i].plus(token1Price[i]).toFormat(0),\r\n            rank: \"-\",\r\n            score: token0Price[i].plus(token1Price[i]).multipliedBy(percentage[i]).multipliedBy(period[i]).multipliedBy(percentage[i]).toFormat(0)\r\n        });\r\n    }\r\n    console.log('retrived bsc token info.....');\r\n    return tokensinfo;\r\n}\r\n\r\nexport default UnicryptBSC;\r\n"]},"metadata":{},"sourceType":"module"}