{"ast":null,"code":"import getETHWeb3 from '../utils/getETHweb3.js';\nimport { Interface } from '@ethersproject/abi';\nimport multicallETHabi from \"../abi/multicallETH_abi.json\";\nlet multiETHAddr = \"0xeefBa1e63905eF1D7ACbA5a8513c70307C1cE441\";\n\nconst multicallETH = async (abi, calls) => {\n  // let provider = new ethers.providers.Web3Provider(window.ethereum);\n  // let signer = provider.getSigner();\n  // const multiETHPortal = new ethers.Contract(multiETHAddr, multicallETHabi, signer);\n  // let currentProvider = new Web3.providers.HttpProvider(\"https://mainnet-nethermind.blockscout.com\");\n  // let provider = new ethers.providers.Web3Provider(currentProvider);\n  // const multiETHPortal = new ethers.Contract(multiETHAddr, multicallETHabi, provider);\n  const web3 = getETHWeb3();\n  const multiETHPortal = new web3.eth.Contract(multicallETHabi, multiETHAddr);\n  const itf = new Interface(abi);\n  const calldata = calls.map(call => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)]);\n  const {\n    returnData\n  } = await multiETHPortal.methods.aggregate(calldata).call();\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call));\n  return res;\n};\n\nexport default multicallETH;","map":{"version":3,"sources":["D:/My Data/backup/GIT/Tracking-LP-tokens-locked/src/Table/multicallETH.js"],"names":["getETHWeb3","Interface","multicallETHabi","multiETHAddr","multicallETH","abi","calls","web3","multiETHPortal","eth","Contract","itf","calldata","map","call","address","toLowerCase","encodeFunctionData","name","params","returnData","methods","aggregate","res","i","decodeFunctionResult"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,wBAAvB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AAEA,IAAIC,YAAY,GAAG,4CAAnB;;AAEA,MAAMC,YAAY,GAAG,OAAOC,GAAP,EAAYC,KAAZ,KAAsB;AAEzC;AACA;AACA;AAEA;AACA;AACA;AAEA,QAAMC,IAAI,GAAGP,UAAU,EAAvB;AACA,QAAMQ,cAAc,GAAG,IAAID,IAAI,CAACE,GAAL,CAASC,QAAb,CAAsBR,eAAtB,EAAuCC,YAAvC,CAAvB;AACA,QAAMQ,GAAG,GAAG,IAAIV,SAAJ,CAAcI,GAAd,CAAZ;AAEA,QAAMO,QAAQ,GAAGN,KAAK,CAACO,GAAN,CAAWC,IAAD,IAAU,CAACA,IAAI,CAACC,OAAL,CAAaC,WAAb,EAAD,EAA6BL,GAAG,CAACM,kBAAJ,CAAuBH,IAAI,CAACI,IAA5B,EAAkCJ,IAAI,CAACK,MAAvC,CAA7B,CAApB,CAAjB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAiB,MAAMZ,cAAc,CAACa,OAAf,CAAuBC,SAAvB,CAAiCV,QAAjC,EAA2CE,IAA3C,EAA7B;AACA,QAAMS,GAAG,GAAGH,UAAU,CAACP,GAAX,CAAe,CAACC,IAAD,EAAOU,CAAP,KAAab,GAAG,CAACc,oBAAJ,CAAyBnB,KAAK,CAACkB,CAAD,CAAL,CAASN,IAAlC,EAAwCJ,IAAxC,CAA5B,CAAZ;AAEA,SAAOS,GAAP;AACD,CAnBD;;AAqBA,eAAenB,YAAf","sourcesContent":["import getETHWeb3 from '../utils/getETHweb3.js';\r\nimport { Interface } from '@ethersproject/abi';\r\nimport multicallETHabi from \"../abi/multicallETH_abi.json\";\r\n\r\nlet multiETHAddr = \"0xeefBa1e63905eF1D7ACbA5a8513c70307C1cE441\";\r\n\r\nconst multicallETH = async (abi, calls) => {\r\n\r\n  // let provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  // let signer = provider.getSigner();\r\n  // const multiETHPortal = new ethers.Contract(multiETHAddr, multicallETHabi, signer);\r\n\r\n  // let currentProvider = new Web3.providers.HttpProvider(\"https://mainnet-nethermind.blockscout.com\");\r\n  // let provider = new ethers.providers.Web3Provider(currentProvider);\r\n  // const multiETHPortal = new ethers.Contract(multiETHAddr, multicallETHabi, provider);\r\n\r\n  const web3 = getETHWeb3();\r\n  const multiETHPortal = new web3.eth.Contract(multicallETHabi, multiETHAddr);\r\n  const itf = new Interface(abi);\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)]);\r\n  const { returnData } = await multiETHPortal.methods.aggregate(calldata).call();\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call));\r\n\r\n  return res;\r\n}\r\n\r\nexport default multicallETH\r\n"]},"metadata":{},"sourceType":"module"}