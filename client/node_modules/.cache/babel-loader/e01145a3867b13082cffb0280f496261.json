{"ast":null,"code":"// import React, {useEffect, useState} from \"react\";\nimport getBSCWeb3 from '../utils/getBSCweb3.js';\nimport deepLockerabi from \"../abi/deepLocker_abi.json\";\nimport pancakeswapBSCabi from \"../abi/pancakeswapBSC_abi.json\";\nimport BigNumber from \"bignumber.js\";\nimport multicallBSC from \"./multicallBSC.js\";\nimport { createClient } from 'urql';\nimport Axios from \"axios\";\nconst deepLockerAddr = \"0x3f4D6bf08CB7A003488Ef082102C2e6418a4551e\";\n\nasync function DeepLocker() {\n  const web3 = getBSCWeb3();\n  const deepLockerPortal = new web3.eth.Contract(deepLockerabi, deepLockerAddr);\n  let total_tokenNums = await deepLockerPortal.methods.depositId().call();\n  const APIURL = 'https://api.thegraph.com/subgraphs/name/pancakeswap/pairs';\n  const client = createClient({\n    url: APIURL\n  });\n  let tokenLocks = [];\n  let LPtokens = [];\n  let tokensQuery0 = [];\n  let tokenData0 = [];\n  let decimals0 = [];\n  let tokensQuery1 = [];\n  let tokenData1 = [];\n  let decimals1 = [];\n  let apiurl0 = [];\n  let apiurl1 = [];\n  let datainfo0 = [];\n  let datainfo1 = [];\n  let percentage = [];\n  let token0Price = [];\n  let token1Price = [];\n  let period = [];\n  let tokensinfo = [];\n  let pancakeApiurl = [];\n  let pancakeDatainfo = [];\n\n  for (let i = 0; i < 2; i++) {\n    tokenLocks.push({\n      address: deepLockerAddr,\n      name: \"lockedToken\",\n      params: [total_tokenNums - i]\n    });\n  }\n\n  const tokenLocksArr = await multicallBSC(deepLockerabi, tokenLocks);\n\n  for (let i = 0; i < tokenLocksArr.length; i++) {\n    pancakeApiurl[i] = `https://api.pancakeswap.info/api/v2/tokens/${tokenLocksArr[i][0]}`;\n    await Axios.get(pancakeApiurl[i]).then(entry => {\n      if (entry) {\n        flag[i] = 1;\n        pancakeDatainfo.push(entry);\n      } else {\n        flag[i] = 0;\n        LPtokens.push({\n          address: tokenLocksArr[i][0],\n          name: \"token0\"\n        });\n        LPtokens.push({\n          address: tokenLocksArr[i][0],\n          name: \"token1\"\n        });\n        LPtokens.push({\n          address: tokenLocksArr[i][0],\n          name: \"decimals\"\n        });\n        LPtokens.push({\n          address: tokenLocksArr[i][0],\n          name: \"getReserves\"\n        });\n        LPtokens.push({\n          address: tokenLocksArr[i][0],\n          name: \"totalSupply\"\n        });\n      }\n    });\n  }\n\n  const LPtokensArr = await multicallBSC(pancakeswapBSCabi, LPtokens);\n\n  for (let i = 0; i < tokenLocksArr.length; i++) {\n    apiurl0[i] = `https://api.pancakeswap.info/api/v2/tokens/${LPtokensArr[i * 5][0]}`;\n    await Axios.get(apiurl0[i]).then(entry => datainfo0.push(entry));\n    apiurl1[i] = `https://api.pancakeswap.info/api/v2/tokens/${LPtokensArr[i * 5 + 1][0]}`;\n    await Axios.get(apiurl1[i]).then(entry => datainfo1.push(entry));\n    tokensQuery0[i] = `\n        query {\n          token(id: \"${LPtokensArr[i * 5][0].toLowerCase()}\"){\n            decimals\n          }\n        }\n        `;\n    tokensQuery1[i] = `\n        query {\n          token(id: \"${LPtokensArr[i * 5 + 1][0].toLowerCase()}\"){\n            decimals\n          }\n        }\n        `;\n    tokenData0[i] = await client.query(tokensQuery0[i]).toPromise();\n    decimals0[i] = tokenData0[i].data.token.decimals;\n    tokenData1[i] = await client.query(tokensQuery1[i]).toPromise();\n    decimals1[i] = tokenData1[i].data.token.decimals;\n    percentage[i] = new BigNumber(tokenLocksArr[i][2]._hex).dividedBy(10 ** LPtokensArr[i * 5 + 2][0]).dividedBy(new BigNumber(LPtokensArr[i * 5 + 4][0]._hex).dividedBy(10 ** LPtokensArr[i * 5 + 2][0]));\n    token0Price[i] = new BigNumber(LPtokensArr[i * 5 + 3][0]._hex).dividedBy(10 ** decimals0[i]).multipliedBy(new BigNumber(datainfo0[i].data.data.price));\n    token1Price[i] = new BigNumber(LPtokensArr[i * 5 + 3][1]._hex).dividedBy(10 ** decimals1[i]).multipliedBy(new BigNumber(datainfo1[i].data.data.price));\n    period[i] = new BigNumber(tokenLocksArr[i][3]._hex).minus(LPtokensArr[i * 5 + 3][2]).dividedBy(86400);\n    tokensinfo.push({\n      tokenName: datainfo0[i].data.data.symbol + \" / \" + datainfo1[i].data.data.symbol,\n      blockchain: \"BSC\",\n      lockedPrice: \"$\" + token0Price[i].plus(token1Price[i]).multipliedBy(percentage[i]).toFormat(0),\n      lockedAmount: new BigNumber(tokenLocksArr[i][2]._hex).dividedBy(10 ** LPtokensArr[i * 5 + 2][0]).toFormat(2) + \" (\" + percentage[i].multipliedBy(100).toFormat(1) + \"%)\",\n      unlockPeriod: period[i].toFormat(0) + \" days left\",\n      locker: \"DeepLocker\",\n      marketCap: \"$\" + token0Price[i].plus(token1Price[i]).toFormat(0),\n      rank: \"â€”\",\n      score: token0Price[i].plus(token1Price[i]).multipliedBy(percentage[i]).multipliedBy(period[i]).multipliedBy(percentage[i]).toFormat(0)\n    });\n  }\n\n  return tokensinfo;\n}\n\n_c = DeepLocker;\nexport default DeepLocker;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeepLocker\");","map":{"version":3,"sources":["D:/My Data/backup/GIT/Tracking-LP-tokens-locked/src/Table/deepLocker.js"],"names":["getBSCWeb3","deepLockerabi","pancakeswapBSCabi","BigNumber","multicallBSC","createClient","Axios","deepLockerAddr","DeepLocker","web3","deepLockerPortal","eth","Contract","total_tokenNums","methods","depositId","call","APIURL","client","url","tokenLocks","LPtokens","tokensQuery0","tokenData0","decimals0","tokensQuery1","tokenData1","decimals1","apiurl0","apiurl1","datainfo0","datainfo1","percentage","token0Price","token1Price","period","tokensinfo","pancakeApiurl","pancakeDatainfo","i","push","address","name","params","tokenLocksArr","length","get","then","entry","flag","LPtokensArr","toLowerCase","query","toPromise","data","token","decimals","_hex","dividedBy","multipliedBy","price","minus","tokenName","symbol","blockchain","lockedPrice","plus","toFormat","lockedAmount","unlockPeriod","locker","marketCap","rank","score"],"mappings":"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","sourcesContent":["// import React, {useEffect, useState} from \"react\";\r\nimport getBSCWeb3 from '../utils/getBSCweb3.js';\r\nimport deepLockerabi from \"../abi/deepLocker_abi.json\";\r\nimport pancakeswapBSCabi from \"../abi/pancakeswapBSC_abi.json\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport multicallBSC from \"./multicallBSC.js\";\r\nimport { createClient } from 'urql'\r\nimport Axios from \"axios\";\r\n\r\nconst deepLockerAddr = \"0x3f4D6bf08CB7A003488Ef082102C2e6418a4551e\";\r\n\r\nasync function DeepLocker() {\r\n\r\n    const web3 = getBSCWeb3();\r\n    const deepLockerPortal = new web3.eth.Contract(deepLockerabi, deepLockerAddr);\r\n    let total_tokenNums = await deepLockerPortal.methods.depositId().call();\r\n\r\n    const APIURL = 'https://api.thegraph.com/subgraphs/name/pancakeswap/pairs';\r\n\r\n    const client = createClient({\r\n        url: APIURL,\r\n    });\r\n\r\n    let tokenLocks = [];\r\n    let LPtokens = [];\r\n\r\n    let tokensQuery0 = [];\r\n    let tokenData0 = [];\r\n    let decimals0 = [];\r\n\r\n    let tokensQuery1 = [];\r\n    let tokenData1 = [];\r\n    let decimals1 = [];\r\n\r\n    let apiurl0 = [];\r\n    let apiurl1 = [];\r\n    let datainfo0 = [];\r\n    let datainfo1 = [];\r\n\r\n    let percentage = [];\r\n    let token0Price = [];\r\n    let token1Price = [];\r\n    let period = [];\r\n\r\n    let tokensinfo = [];\r\n\r\n    let pancakeApiurl = [];\r\n    let pancakeDatainfo = [];\r\n\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n        tokenLocks.push({address: deepLockerAddr, name: \"lockedToken\", params: [total_tokenNums-i]});\r\n    }\r\n    const tokenLocksArr = await multicallBSC(deepLockerabi, tokenLocks);\r\n\r\n    for (let i = 0; i < tokenLocksArr.length; i++) {\r\n        pancakeApiurl[i] = `https://api.pancakeswap.info/api/v2/tokens/${tokenLocksArr[i][0]}`;\r\n        await Axios.get(pancakeApiurl[i]).then((entry) => { \r\n            if(entry) {\r\n                flag[i] = 1;\r\n                pancakeDatainfo.push(entry);\r\n            }\r\n            else {\r\n                flag[i] = 0;\r\n                LPtokens.push({address: tokenLocksArr[i][0], name: \"token0\"});\r\n                LPtokens.push({address: tokenLocksArr[i][0], name: \"token1\"});\r\n                LPtokens.push({address: tokenLocksArr[i][0], name: \"decimals\"});\r\n                LPtokens.push({address: tokenLocksArr[i][0], name: \"getReserves\"});\r\n                LPtokens.push({address: tokenLocksArr[i][0], name: \"totalSupply\"});\r\n            }\r\n        });\r\n\r\n    }\r\n    const LPtokensArr = await multicallBSC(pancakeswapBSCabi, LPtokens);\r\n\r\n    for (let i = 0; i < tokenLocksArr.length; i++) {\r\n\r\n\r\n\r\n\r\n        apiurl0[i] = `https://api.pancakeswap.info/api/v2/tokens/${LPtokensArr[i*5][0]}`;\r\n        await Axios.get(apiurl0[i]).then(entry => \r\n        datainfo0.push(entry));\r\n  \r\n        apiurl1[i] = `https://api.pancakeswap.info/api/v2/tokens/${LPtokensArr[i*5+1][0]}`;\r\n        await Axios.get(apiurl1[i]).then(entry => \r\n        datainfo1.push(entry));\r\n\r\n        tokensQuery0[i] = `\r\n        query {\r\n          token(id: \"${LPtokensArr[i*5][0].toLowerCase()}\"){\r\n            decimals\r\n          }\r\n        }\r\n        `;\r\n        tokensQuery1[i] = `\r\n        query {\r\n          token(id: \"${LPtokensArr[i*5+1][0].toLowerCase()}\"){\r\n            decimals\r\n          }\r\n        }\r\n        `;\r\n\r\n        tokenData0[i] = await client.query(tokensQuery0[i]).toPromise();\r\n        decimals0[i] = tokenData0[i].data.token.decimals;\r\n    \r\n        tokenData1[i] = await client.query(tokensQuery1[i]).toPromise();\r\n        decimals1[i] = tokenData1[i].data.token.decimals;\r\n\r\n        percentage[i] = new BigNumber(tokenLocksArr[i][2]._hex).dividedBy(10**LPtokensArr[i*5+2][0]).dividedBy(new BigNumber(LPtokensArr[i*5+4][0]._hex).dividedBy(10**LPtokensArr[i*5+2][0]));\r\n        token0Price[i] = new BigNumber(LPtokensArr[i*5+3][0]._hex).dividedBy(10**decimals0[i]).multipliedBy(new BigNumber(datainfo0[i].data.data.price));\r\n        token1Price[i] = new BigNumber(LPtokensArr[i*5+3][1]._hex).dividedBy(10**decimals1[i]).multipliedBy(new BigNumber(datainfo1[i].data.data.price));\r\n        period[i] = new BigNumber(tokenLocksArr[i][3]._hex).minus(LPtokensArr[i*5+3][2]).dividedBy(86400);\r\n\r\n        tokensinfo.push({ tokenName : datainfo0[i].data.data.symbol + \" / \" + datainfo1[i].data.data.symbol, \r\n                        blockchain: \"BSC\",\r\n                        lockedPrice: \"$\" + token0Price[i].plus(token1Price[i]).multipliedBy(percentage[i]).toFormat(0), \r\n                        lockedAmount: new BigNumber(tokenLocksArr[i][2]._hex).dividedBy(10**LPtokensArr[i*5+2][0]).toFormat(2) + \" (\" + percentage[i].multipliedBy(100).toFormat(1) + \"%)\", \r\n                        unlockPeriod: period[i].toFormat(0) + \" days left\", \r\n                        locker: \"DeepLocker\", \r\n                        marketCap: \"$\" + token0Price[i].plus(token1Price[i]).toFormat(0), \r\n                        rank: \"â€”\", \r\n                        score: token0Price[i].plus(token1Price[i]).multipliedBy(percentage[i]).multipliedBy(period[i]).multipliedBy(percentage[i]).toFormat(0) });\r\n    }\r\n\r\n    return tokensinfo;\r\n}\r\n\r\nexport default DeepLocker;\r\n"]},"metadata":{},"sourceType":"module"}