{"ast":null,"code":"/**\n * big-number.js -> Arithmetic operations on big integers\n * Pure javascript implementation, no external libraries needed\n * Copyright(c) 2012-2018 Alex Bardas <alex.bardas@gmail.com>\n * MIT Licensed\n * It supports the following operations:\n *      addition, subtraction, multiplication, division, power, absolute value\n * It works with both positive and negative integers\n */\n!function () {\n  'use strict'; // Helper function which tests if a given character is a digit\n\n  var testDigit = function (digit) {\n    return /^\\d$/.test(digit);\n  }; // Helper function which returns the absolute value of a given number\n\n\n  var abs = function (number) {\n    var bigNumber;\n\n    if (typeof number === 'undefined') {\n      return;\n    }\n\n    bigNumber = BigNumber(number);\n    bigNumber.sign = 1;\n    return bigNumber;\n  }; // Check if argument is valid array\n\n\n  var isArray = function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n\n  var isValidType = function (number) {\n    return [typeof number === 'number', typeof number === 'string' && number.length > 0, isArray(number) && number.length > 0, number instanceof BigNumber].some(function (bool) {\n      return bool === true;\n    });\n  };\n\n  var errors = {\n    'invalid': 'Invalid Number',\n    'division by zero': 'Invalid Number - Division By Zero'\n  }; // Constructor function which creates a new BigNumber object\n  // from an integer, a string, an array or other BigNumber object\n\n  function BigNumber(initialNumber) {\n    var index;\n\n    if (!(this instanceof BigNumber)) {\n      return new BigNumber(initialNumber);\n    }\n\n    this.number = [];\n    this.sign = 1;\n    this.rest = 0; // The initial number can be an array, string, number of another big number\n    // e.g. array     : [3,2,1], ['+',3,2,1], ['-',3,2,1]\n    //      number    : 312\n    //      string    : '321', '+321', -321'\n    //      BigNumber : BigNumber(321)\n    // Every character except the first must be a digit\n\n    if (!isValidType(initialNumber)) {\n      this.number = errors['invalid'];\n      return;\n    }\n\n    if (isArray(initialNumber)) {\n      if (initialNumber.length && initialNumber[0] === '-' || initialNumber[0] === '+') {\n        this.sign = initialNumber[0] === '+' ? 1 : -1;\n        initialNumber.shift(0);\n      }\n\n      for (index = initialNumber.length - 1; index >= 0; index--) {\n        if (!this.addDigit(initialNumber[index])) return;\n      }\n    } else {\n      initialNumber = initialNumber.toString();\n\n      if (initialNumber.charAt(0) === '-' || initialNumber.charAt(0) === '+') {\n        this.sign = initialNumber.charAt(0) === '+' ? 1 : -1;\n        initialNumber = initialNumber.substring(1);\n      }\n\n      for (index = initialNumber.length - 1; index >= 0; index--) {\n        if (!this.addDigit(parseInt(initialNumber.charAt(index), 10))) {\n          return;\n        }\n      }\n    }\n  }\n\n  BigNumber.prototype.addDigit = function (digit) {\n    if (testDigit(digit)) {\n      this.number.push(digit);\n    } else {\n      this.number = errors['invalid'];\n      return false;\n    }\n\n    return this;\n  };\n\n  BigNumber.prototype.isEven = function () {\n    return this.number[0] % 2 === 0;\n  }; // returns:\n  //      null if this.number is not a number\n  //      0 if this.number === number\n  //      -1 if this.number < number\n  //      1 if this.number > number\n\n\n  BigNumber.prototype._compare = function (number) {\n    var bigNumber;\n    var index;\n\n    if (!isValidType(number)) {\n      return null;\n    }\n\n    bigNumber = BigNumber(number); // If the numbers have different signs, then the positive\n    // number is greater\n\n    if (this.sign !== bigNumber.sign) {\n      return this.sign;\n    } // Else, check the length\n\n\n    if (this.number.length > bigNumber.number.length) {\n      return this.sign;\n    } else if (this.number.length < bigNumber.number.length) {\n      return this.sign * -1;\n    } // If they have similar length, compare the numbers\n    // digit by digit\n\n\n    for (index = this.number.length - 1; index >= 0; index--) {\n      if (this.number[index] > bigNumber.number[index]) {\n        return this.sign;\n      } else if (this.number[index] < bigNumber.number[index]) {\n        return this.sign * -1;\n      }\n    }\n\n    return 0;\n  }; // Greater than\n\n\n  BigNumber.prototype.gt = function (number) {\n    return this._compare(number) > 0;\n  }; // Greater than or equal\n\n\n  BigNumber.prototype.gte = function (number) {\n    return this._compare(number) >= 0;\n  }; // this.number equals n\n\n\n  BigNumber.prototype.equals = function (number) {\n    return this._compare(number) === 0;\n  }; // Less than or equal\n\n\n  BigNumber.prototype.lte = function (number) {\n    return this._compare(number) <= 0;\n  }; // Less than\n\n\n  BigNumber.prototype.lt = function (number) {\n    return this._compare(number) < 0;\n  }; // Addition\n\n\n  BigNumber.prototype.add = function (number) {\n    var bigNumber;\n\n    if (typeof number === 'undefined') {\n      return this;\n    }\n\n    bigNumber = BigNumber(number);\n\n    if (this.sign !== bigNumber.sign) {\n      if (this.sign > 0) {\n        bigNumber.sign = 1;\n        return this.minus(bigNumber);\n      } else {\n        this.sign = 1;\n        return bigNumber.minus(this);\n      }\n    }\n\n    this.number = BigNumber._add(this, bigNumber);\n    return this;\n  }; // Subtraction\n\n\n  BigNumber.prototype.subtract = function (number) {\n    var bigNumber;\n\n    if (typeof number === 'undefined') {\n      return this;\n    }\n\n    bigNumber = BigNumber(number);\n\n    if (this.sign !== bigNumber.sign) {\n      this.number = BigNumber._add(this, bigNumber);\n      return this;\n    } // If current number is lesser than the given bigNumber, the result will be negative\n\n\n    this.sign = this.lt(bigNumber) ? -1 : 1;\n    this.number = abs(this).lt(abs(bigNumber)) ? BigNumber._subtract(bigNumber, this) : BigNumber._subtract(this, bigNumber);\n    return this;\n  }; // adds two positive BigNumbers\n\n\n  BigNumber._add = function (a, b) {\n    var index;\n    var remainder = 0;\n    var length = Math.max(a.number.length, b.number.length);\n\n    for (index = 0; index < length || remainder > 0; index++) {\n      a.number[index] = (remainder += (a.number[index] || 0) + (b.number[index] || 0)) % 10;\n      remainder = Math.floor(remainder / 10);\n    }\n\n    return a.number;\n  }; // a - b\n  // a and b are 2 positive BigNumbers and a > b\n\n\n  BigNumber._subtract = function (a, b) {\n    var index;\n    var remainder = 0;\n    var length = a.number.length;\n\n    for (index = 0; index < length; index++) {\n      a.number[index] -= (b.number[index] || 0) + remainder;\n      a.number[index] += (remainder = a.number[index] < 0 ? 1 : 0) * 10;\n    } // Count the zeroes which will be removed\n\n\n    index = 0;\n    length = a.number.length - 1;\n\n    while (a.number[length - index] === 0 && length - index > 0) {\n      index++;\n    }\n\n    if (index > 0) {\n      a.number.splice(-index);\n    }\n\n    return a.number;\n  }; // this.number * number\n\n\n  BigNumber.prototype.multiply = function (number) {\n    if (typeof number === 'undefined') {\n      return this;\n    }\n\n    var bigNumber = BigNumber(number);\n    var index;\n    var givenNumberIndex;\n    var remainder = 0;\n    var result = [];\n\n    if (this.isZero() || bigNumber.isZero()) {\n      return BigNumber(0);\n    }\n\n    this.sign *= bigNumber.sign; // multiply the numbers\n\n    for (index = 0; index < this.number.length; index++) {\n      for (remainder = 0, givenNumberIndex = 0; givenNumberIndex < bigNumber.number.length || remainder > 0; givenNumberIndex++) {\n        result[index + givenNumberIndex] = (remainder += (result[index + givenNumberIndex] || 0) + this.number[index] * (bigNumber.number[givenNumberIndex] || 0)) % 10;\n        remainder = Math.floor(remainder / 10);\n      }\n    }\n\n    this.number = result;\n    return this;\n  }; // this.number / number\n\n\n  BigNumber.prototype.divide = function (number) {\n    if (typeof number === 'undefined') {\n      return this;\n    }\n\n    var bigNumber = BigNumber(number);\n    var index;\n    var length;\n    var result = [];\n    var rest = BigNumber(0); // test if one of the numbers is zero\n\n    if (bigNumber.isZero()) {\n      this.number = errors['division by zero'];\n      return this;\n    } else if (this.isZero()) {\n      this.rest = BigNumber(0);\n      return this;\n    }\n\n    this.sign *= bigNumber.sign;\n    bigNumber.sign = 1; // Skip division by 1\n\n    if (bigNumber.number.length === 1 && bigNumber.number[0] === 1) {\n      this.rest = BigNumber(0);\n      return this;\n    }\n\n    for (index = this.number.length - 1; index >= 0; index--) {\n      rest.multiply(10);\n      rest.number[0] = this.number[index];\n      result[index] = 0;\n\n      while (bigNumber.lte(rest)) {\n        result[index]++;\n        rest.subtract(bigNumber);\n      }\n    }\n\n    index = 0;\n    length = result.length - 1;\n\n    while (result[length - index] === 0 && length - index > 0) {\n      index++;\n    }\n\n    if (index > 0) {\n      result.splice(-index);\n    }\n\n    this.rest = rest;\n    this.number = result;\n    return this;\n  }; // this.number % number\n\n\n  BigNumber.prototype.mod = function (number) {\n    return this.divide(number).rest;\n  };\n\n  BigNumber.prototype.power = function (number) {\n    if (typeof number === 'undefined') return;\n    var bigNumber;\n    var bigNumberPower; // Convert the argument to a big number\n\n    if (!isValidType(number)) {\n      this.number = errors['invalid'];\n      return;\n    }\n\n    bigNumberPower = BigNumber(number);\n\n    if (bigNumberPower.isZero()) {\n      return BigNumber(1);\n    }\n\n    if (bigNumberPower.val() === '1') {\n      return this;\n    }\n\n    bigNumber = BigNumber(this);\n    this.number = [1];\n\n    while (bigNumberPower.gt(0)) {\n      if (!bigNumberPower.isEven()) {\n        this.multiply(bigNumber);\n        bigNumberPower.subtract(1);\n        continue;\n      }\n\n      bigNumber.multiply(bigNumber);\n      bigNumberPower.div(2);\n    }\n\n    return this;\n  }; // |this.number|\n\n\n  BigNumber.prototype.abs = function () {\n    this.sign = 1;\n    return this;\n  }; // Check if this.number is equal to 0\n\n\n  BigNumber.prototype.isZero = function () {\n    var index;\n\n    for (index = 0; index < this.number.length; index++) {\n      if (this.number[index] !== 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // this.number.toString()\n\n\n  BigNumber.prototype.toString = function () {\n    var index;\n    var str = '';\n\n    if (typeof this.number === 'string') {\n      return this.number;\n    }\n\n    for (index = this.number.length - 1; index >= 0; index--) {\n      str += this.number[index];\n    }\n\n    return this.sign > 0 ? str : '-' + str;\n  }; // Use shorcuts for functions names\n\n\n  BigNumber.prototype.plus = BigNumber.prototype.add;\n  BigNumber.prototype.minus = BigNumber.prototype.subtract;\n  BigNumber.prototype.div = BigNumber.prototype.divide;\n  BigNumber.prototype.mult = BigNumber.prototype.multiply;\n  BigNumber.prototype.pow = BigNumber.prototype.power;\n  BigNumber.prototype.val = BigNumber.prototype.toString; // CommonJS\n\n  if (typeof exports === 'object' && typeof module !== 'undefined') {\n    module.exports = BigNumber;\n  } else if (typeof window !== 'undefined') {\n    window.BigNumber = BigNumber;\n  }\n}();","map":{"version":3,"sources":["E:/sample/track_locked_projects/react_table/node_modules/big-number/big-number.js"],"names":["testDigit","digit","test","abs","number","bigNumber","BigNumber","sign","isArray","arg","Object","prototype","toString","call","isValidType","length","some","bool","errors","initialNumber","index","rest","shift","addDigit","charAt","substring","parseInt","push","isEven","_compare","gt","gte","equals","lte","lt","add","minus","_add","subtract","_subtract","a","b","remainder","Math","max","floor","splice","multiply","givenNumberIndex","result","isZero","divide","mod","power","bigNumberPower","val","div","str","plus","mult","pow","exports","module","window"],"mappings":"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","sourcesContent":["/**\n * big-number.js -> Arithmetic operations on big integers\n * Pure javascript implementation, no external libraries needed\n * Copyright(c) 2012-2018 Alex Bardas <alex.bardas@gmail.com>\n * MIT Licensed\n * It supports the following operations:\n *      addition, subtraction, multiplication, division, power, absolute value\n * It works with both positive and negative integers\n */\n\n!(function() {\n    'use strict';\n\n    // Helper function which tests if a given character is a digit\n    var testDigit = function(digit) {\n        return (/^\\d$/.test(digit));\n    };\n\n    // Helper function which returns the absolute value of a given number\n    var abs = function(number) {\n        var bigNumber;\n        if (typeof number === 'undefined') {\n            return;\n        }\n        bigNumber = BigNumber(number);\n        bigNumber.sign = 1;\n        return bigNumber;\n    };\n\n    // Check if argument is valid array\n    var isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n\n    var isValidType = function(number) {\n        return [\n            typeof number === 'number',\n            typeof number === 'string' && number.length > 0,\n            isArray(number) && number.length > 0,\n            number instanceof BigNumber\n        ].some(function(bool) {\n            return bool === true;\n        });\n    };\n\n    var errors = {\n        'invalid': 'Invalid Number',\n        'division by zero': 'Invalid Number - Division By Zero'\n    };\n\n    // Constructor function which creates a new BigNumber object\n    // from an integer, a string, an array or other BigNumber object\n    function BigNumber(initialNumber) {\n        var index;\n\n        if (!(this instanceof BigNumber)) {\n            return new BigNumber(initialNumber);\n        }\n\n        this.number = [];\n        this.sign = 1;\n        this.rest = 0;\n\n        // The initial number can be an array, string, number of another big number\n        // e.g. array     : [3,2,1], ['+',3,2,1], ['-',3,2,1]\n        //      number    : 312\n        //      string    : '321', '+321', -321'\n        //      BigNumber : BigNumber(321)\n        // Every character except the first must be a digit\n\n        if (!isValidType(initialNumber)) {\n            this.number = errors['invalid'];\n            return;\n        }\n\n        if (isArray(initialNumber)) {\n            if (initialNumber.length && initialNumber[0] === '-' || initialNumber[0] === '+') {\n                this.sign = initialNumber[0] === '+' ? 1 : -1;\n                initialNumber.shift(0);\n            }\n            for (index = initialNumber.length - 1; index >= 0; index--) {\n                if (!this.addDigit(initialNumber[index]))\n                    return;\n            }\n        } else {\n            initialNumber = initialNumber.toString();\n            if (initialNumber.charAt(0) === '-' || initialNumber.charAt(0) === '+') {\n                this.sign = initialNumber.charAt(0) === '+' ? 1 : -1;\n                initialNumber = initialNumber.substring(1);\n            }\n\n            for (index = initialNumber.length - 1; index >= 0; index--) {\n                if (!this.addDigit(parseInt(initialNumber.charAt(index), 10))) {\n                    return;\n                }\n            }\n        }\n    }\n\n    BigNumber.prototype.addDigit = function(digit) {\n        if (testDigit(digit)) {\n            this.number.push(digit);\n        } else {\n            this.number = errors['invalid'];\n            return false;\n        }\n\n        return this;\n    };\n\n    BigNumber.prototype.isEven = function() {\n        return this.number[0] % 2 === 0;\n    };\n\n    // returns:\n    //      null if this.number is not a number\n    //      0 if this.number === number\n    //      -1 if this.number < number\n    //      1 if this.number > number\n    BigNumber.prototype._compare = function(number) {\n        var bigNumber;\n        var index;\n\n        if (!isValidType(number)) {\n            return null;\n        }\n\n        bigNumber = BigNumber(number);\n\n        // If the numbers have different signs, then the positive\n        // number is greater\n        if (this.sign !== bigNumber.sign) {\n            return this.sign;\n        }\n\n        // Else, check the length\n        if (this.number.length > bigNumber.number.length) {\n            return this.sign;\n        } else if (this.number.length < bigNumber.number.length) {\n            return this.sign * (-1);\n        }\n\n        // If they have similar length, compare the numbers\n        // digit by digit\n        for (index = this.number.length - 1; index >= 0; index--) {\n            if (this.number[index] > bigNumber.number[index]) {\n                return this.sign;\n            } else if (this.number[index] < bigNumber.number[index]) {\n                return this.sign * (-1);\n            }\n        }\n\n        return 0;\n    };\n\n    // Greater than\n    BigNumber.prototype.gt = function(number) {\n        return this._compare(number) > 0;\n    };\n\n    // Greater than or equal\n    BigNumber.prototype.gte = function(number) {\n        return this._compare(number) >= 0;\n    };\n\n    // this.number equals n\n    BigNumber.prototype.equals = function(number) {\n        return this._compare(number) === 0;\n    };\n\n    // Less than or equal\n    BigNumber.prototype.lte = function(number) {\n        return this._compare(number) <= 0;\n    };\n\n    // Less than\n    BigNumber.prototype.lt = function(number) {\n        return this._compare(number) < 0;\n    };\n\n    // Addition\n    BigNumber.prototype.add = function(number) {\n        var bigNumber;\n        if (typeof number === 'undefined') {\n            return this;\n        }\n        bigNumber = BigNumber(number);\n\n        if (this.sign !== bigNumber.sign) {\n            if (this.sign > 0) {\n                bigNumber.sign = 1;\n                return this.minus(bigNumber);\n            }\n            else {\n                this.sign = 1;\n                return bigNumber.minus(this);\n            }\n        }\n\n        this.number = BigNumber._add(this, bigNumber);\n        return this;\n    };\n\n    // Subtraction\n    BigNumber.prototype.subtract = function(number) {\n        var bigNumber;\n        if (typeof number === 'undefined') {\n            return this;\n        }\n        bigNumber = BigNumber(number);\n\n        if (this.sign !== bigNumber.sign) {\n            this.number = BigNumber._add(this, bigNumber);\n            return this;\n        }\n\n        // If current number is lesser than the given bigNumber, the result will be negative\n        this.sign = (this.lt(bigNumber)) ? -1 : 1;\n        this.number = (abs(this).lt(abs(bigNumber)))\n            ? BigNumber._subtract(bigNumber, this)\n            : BigNumber._subtract(this, bigNumber);\n\n        return this;\n    };\n\n    // adds two positive BigNumbers\n    BigNumber._add = function(a, b) {\n        var index;\n        var remainder = 0;\n        var length = Math.max(a.number.length, b.number.length);\n\n        for (index = 0; index < length || remainder > 0; index++) {\n            a.number[index] = (remainder += (a.number[index] || 0) + (b.number[index] || 0)) % 10;\n            remainder = Math.floor(remainder / 10);\n        }\n\n        return a.number;\n    };\n\n    // a - b\n    // a and b are 2 positive BigNumbers and a > b\n    BigNumber._subtract = function(a, b) {\n        var index;\n        var remainder = 0;\n        var length = a.number.length;\n\n        for (index = 0; index < length; index++) {\n            a.number[index] -= (b.number[index] || 0) + remainder;\n            a.number[index] += (remainder = (a.number[index] < 0) ? 1 : 0) * 10;\n        }\n        // Count the zeroes which will be removed\n        index = 0;\n        length = a.number.length - 1;\n        while (a.number[length - index] === 0 && length - index > 0) {\n            index++;\n        }\n        if (index > 0) {\n            a.number.splice(-index);\n        }\n        return a.number;\n    };\n\n    // this.number * number\n    BigNumber.prototype.multiply = function(number) {\n        if (typeof number === 'undefined') {\n            return this;\n        }\n        var bigNumber = BigNumber(number);\n        var index;\n        var givenNumberIndex;\n        var remainder = 0;\n        var result = [];\n\n        if (this.isZero() || bigNumber.isZero()) {\n            return BigNumber(0);\n        }\n\n        this.sign *= bigNumber.sign;\n\n        // multiply the numbers\n        for (index = 0; index < this.number.length; index++) {\n            for (remainder = 0, givenNumberIndex = 0; givenNumberIndex < bigNumber.number.length || remainder > 0; givenNumberIndex++) {\n                result[index + givenNumberIndex] = (remainder += (result[index + givenNumberIndex] || 0) + this.number[index] * (bigNumber.number[givenNumberIndex] || 0)) % 10;\n                remainder = Math.floor(remainder / 10);\n            }\n        }\n\n        this.number = result;\n        return this;\n    };\n\n    // this.number / number\n    BigNumber.prototype.divide = function(number) {\n        if (typeof number === 'undefined') {\n            return this;\n        }\n\n        var bigNumber = BigNumber(number);\n        var index;\n        var length;\n        var result = [];\n        var rest = BigNumber(0);\n\n        // test if one of the numbers is zero\n        if (bigNumber.isZero()) {\n            this.number = errors['division by zero'];\n            return this;\n        } else if (this.isZero()) {\n            this.rest = BigNumber(0);\n            return this;\n        }\n\n        this.sign *= bigNumber.sign;\n        bigNumber.sign = 1;\n\n        // Skip division by 1\n        if (bigNumber.number.length === 1 && bigNumber.number[0] === 1) {\n            this.rest = BigNumber(0);\n            return this;\n        }\n\n        for (index = this.number.length - 1; index >= 0; index--) {\n            rest.multiply(10);\n            rest.number[0] = this.number[index];\n            result[index] = 0;\n            while (bigNumber.lte(rest)) {\n                result[index]++;\n                rest.subtract(bigNumber);\n            }\n        }\n\n        index = 0;\n        length = result.length - 1;\n        while (result[length - index] === 0 && length - index > 0) {\n            index++;\n        }\n        if (index > 0) {\n            result.splice(-index);\n        }\n\n        this.rest = rest;\n        this.number = result;\n        return this;\n    };\n\n    // this.number % number\n    BigNumber.prototype.mod = function(number) {\n        return this.divide(number).rest;\n    };\n\n    BigNumber.prototype.power = function(number) {\n        if (typeof number === 'undefined')\n            return;\n        var bigNumber;\n        var bigNumberPower;\n        // Convert the argument to a big number\n        if (!isValidType(number)) {\n            this.number = errors['invalid'];\n            return;\n        }\n        bigNumberPower = BigNumber(number);\n        if (bigNumberPower.isZero()) {\n            return BigNumber(1);\n        }\n        if (bigNumberPower.val() === '1') {\n            return this;\n        }\n\n        bigNumber = BigNumber(this);\n\n        this.number = [1];\n        while (bigNumberPower.gt(0)) {\n            if (!bigNumberPower.isEven()) {\n                this.multiply(bigNumber);\n                bigNumberPower.subtract(1);\n                continue;\n            }\n            bigNumber.multiply(bigNumber);\n            bigNumberPower.div(2);\n        }\n\n        return this;\n    };\n\n    // |this.number|\n    BigNumber.prototype.abs = function() {\n        this.sign = 1;\n        return this;\n    };\n\n    // Check if this.number is equal to 0\n    BigNumber.prototype.isZero = function() {\n        var index;\n        for (index = 0; index < this.number.length; index++) {\n            if (this.number[index] !== 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    // this.number.toString()\n    BigNumber.prototype.toString = function() {\n        var index;\n        var str = '';\n        if (typeof this.number === 'string') {\n            return this.number;\n        }\n\n        for (index = this.number.length - 1; index >= 0; index--) {\n            str += this.number[index];\n        }\n\n        return (this.sign > 0) ? str : ('-' + str);\n    };\n\n    // Use shorcuts for functions names\n    BigNumber.prototype.plus = BigNumber.prototype.add;\n    BigNumber.prototype.minus = BigNumber.prototype.subtract;\n    BigNumber.prototype.div = BigNumber.prototype.divide;\n    BigNumber.prototype.mult = BigNumber.prototype.multiply;\n    BigNumber.prototype.pow = BigNumber.prototype.power;\n    BigNumber.prototype.val = BigNumber.prototype.toString;\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n        module.exports = BigNumber;\n    } else if (typeof window !== 'undefined') {\n        window.BigNumber = BigNumber;\n    }\n})();\n"]},"metadata":{},"sourceType":"script"}