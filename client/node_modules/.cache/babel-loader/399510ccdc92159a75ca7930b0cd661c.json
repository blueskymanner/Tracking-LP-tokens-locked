{"ast":null,"code":"// import React, {useEffect, useState} from \"react\";\n// import { ethers } from \"ethers\";\n// import unicryptETHabi from \"../abi/unicrypt_abi.json\";\n// const Getdata = async () => {\n//     const unicryptAddressETH = \"0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214\";\n//     const get_gFees = async () => {\n//         try {\n//             const { ethereum } = window;\n//             if (ethereum) {\n//               const provider = new ethers.providers.Web3Provider(ethereum);\n//               const signer = provider.getSigner();\n//               const gFeesPortal = new ethers.Contract(unicryptAddressETH, unicryptETHabi, signer);\n//               /*\n//                * Call the gFees variable from Smart Contract\n//                */\n//               const gFees = await gFeesPortal.getNumLockedTokens();\n//               return gFees;\n//             } else {\n//               console.log(\"Ethereum object doesn't exist!\")\n//             }\n//         } catch (error) {\n//             console.log(error);\n//         }\n//     }\n// }\n// export default Getdata;\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport unicryptETHabi from \"../abi/unicrypt_abi.json\";\n\nconst Getdata = () => {\n  const unicryptAddressETH = \"0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214\";\n\n  const get_gFees = async () => {\n    let provider = ethers.getDefaultProvider();\n    const gFeesPortal = new ethers.Contract(unicryptAddressETH, unicryptETHabi, provider);\n    const gFees = await gFeesPortal.getNumLockedTokens();\n    return gFees;\n  };\n};\n\n_c = Getdata;\nexport default get_gFees;\n\nvar _c;\n\n$RefreshReg$(_c, \"Getdata\");","map":{"version":3,"sources":["E:/sample/track_locked_projects/react_table/src/Table/getdata.js"],"names":["React","useEffect","useState","ethers","unicryptETHabi","Getdata","unicryptAddressETH","get_gFees","provider","getDefaultProvider","gFeesPortal","Contract","gFees","getNumLockedTokens"],"mappings":"AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAElB,QAAMC,kBAAkB,GAAG,4CAA3B;;AAEA,QAAMC,SAAS,GAAG,YAAY;AAC1B,QAAIC,QAAQ,GAAGL,MAAM,CAACM,kBAAP,EAAf;AAEA,UAAMC,WAAW,GAAG,IAAIP,MAAM,CAACQ,QAAX,CAAoBL,kBAApB,EAAwCF,cAAxC,EAAwDI,QAAxD,CAApB;AAEA,UAAMI,KAAK,GAAG,MAAMF,WAAW,CAACG,kBAAZ,EAApB;AAEA,WAAOD,KAAP;AACH,GARD;AASH,CAbD;;KAAMP,O;AAeN,eAAeE,SAAf","sourcesContent":["// import React, {useEffect, useState} from \"react\";\r\n// import { ethers } from \"ethers\";\r\n// import unicryptETHabi from \"../abi/unicrypt_abi.json\";\r\n\r\n// const Getdata = async () => {\r\n\r\n//     const unicryptAddressETH = \"0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214\";\r\n\r\n//     const get_gFees = async () => {\r\n//         try {\r\n//             const { ethereum } = window;\r\n//             if (ethereum) {\r\n//               const provider = new ethers.providers.Web3Provider(ethereum);\r\n//               const signer = provider.getSigner();\r\n//               const gFeesPortal = new ethers.Contract(unicryptAddressETH, unicryptETHabi, signer);\r\n      \r\n//               /*\r\n//                * Call the gFees variable from Smart Contract\r\n//                */\r\n//               const gFees = await gFeesPortal.getNumLockedTokens();\r\n//               return gFees;\r\n\r\n//             } else {\r\n//               console.log(\"Ethereum object doesn't exist!\")\r\n//             }\r\n//         } catch (error) {\r\n//             console.log(error);\r\n//         }\r\n//     }\r\n\r\n// }\r\n\r\n// export default Getdata;\r\n\r\n\r\n\r\nimport React, {useEffect, useState} from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport unicryptETHabi from \"../abi/unicrypt_abi.json\";\r\n\r\nconst Getdata = () => {\r\n\r\n    const unicryptAddressETH = \"0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214\";\r\n\r\n    const get_gFees = async () => {\r\n        let provider = ethers.getDefaultProvider();\r\n\r\n        const gFeesPortal = new ethers.Contract(unicryptAddressETH, unicryptETHabi, provider);\r\n\r\n        const gFees = await gFeesPortal.getNumLockedTokens();\r\n        \r\n        return gFees;\r\n    }\r\n}\r\n\r\nexport default get_gFees;"]},"metadata":{},"sourceType":"module"}