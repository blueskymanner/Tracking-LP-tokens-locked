{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport unicryptETHabi from \"../abi/unicrypt_abi.json\";\n\nconst Getdata = () => {\n  const unicryptAddressETH = \"0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214\";\n\n  const get_gFees = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        //   const provider = new ethers.providers.Web3Provider(ethereum);\n        //   const signer = provider.getSigner();\n        //   const gFeesPortal = new ethers.Contract(unicryptETHabi);\n\n        /*\r\n         * Call the gFees variable from Smart Contract\r\n         */\n        //const gFees = await gFeesPortal.getNumLockedTokens();\n        let provider = ethers.getDefaultProvider();\n        let contract = new ethers.Contract(unicryptAddressETH, unicryptETHabi, provider);\n        let gFees = await contract.getNumLockedTokens();\n        return gFees;\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n_c = Getdata;\nexport default Getdata;\n\nvar _c;\n\n$RefreshReg$(_c, \"Getdata\");","map":{"version":3,"sources":["E:/sample/track_locked_projects/react_table/src/Table/getdata.js"],"names":["React","useEffect","useState","ethers","unicryptETHabi","Getdata","unicryptAddressETH","get_gFees","ethereum","window","provider","getDefaultProvider","contract","Contract","gFees","getNumLockedTokens","console","log","error"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAElB,QAAMC,kBAAkB,GAAG,4CAA3B;;AACA,QAAMC,SAAS,GAAG,YAAY;AAE1B,QAAI;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAeC,MAArB;;AACA,UAAID,QAAJ,EAAc;AACd;AACA;AACA;;AAEE;AACd;AACA;AACc;AAEA,YAAIE,QAAQ,GAAGP,MAAM,CAACQ,kBAAP,EAAf;AACA,YAAIC,QAAQ,GAAG,IAAIT,MAAM,CAACU,QAAX,CAAoBP,kBAApB,EAAwCF,cAAxC,EAAwDM,QAAxD,CAAf;AACA,YAAII,KAAK,GAAG,MAAMF,QAAQ,CAACG,kBAAT,EAAlB;AACA,eAAOD,KAAP;AAED,OAfD,MAeO;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACJ,KApBD,CAoBE,OAAOC,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACJ,GAzBD;AA2BH,CA9BD;;KAAMb,O;AAgCN,eAAeA,OAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport unicryptETHabi from \"../abi/unicrypt_abi.json\";\r\n\r\nconst Getdata = () => {\r\n\r\n    const unicryptAddressETH = \"0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214\";\r\n    const get_gFees = async () => {\r\n        \r\n        try {\r\n            const { ethereum } = window;\r\n            if (ethereum) {\r\n            //   const provider = new ethers.providers.Web3Provider(ethereum);\r\n            //   const signer = provider.getSigner();\r\n            //   const gFeesPortal = new ethers.Contract(unicryptETHabi);\r\n      \r\n              /*\r\n               * Call the gFees variable from Smart Contract\r\n               */\r\n              //const gFees = await gFeesPortal.getNumLockedTokens();\r\n\r\n              let provider = ethers.getDefaultProvider();\r\n              let contract = new ethers.Contract(unicryptAddressETH, unicryptETHabi, provider);\r\n              let gFees = await contract.getNumLockedTokens();\r\n              return gFees;\r\n\r\n            } else {\r\n              console.log(\"Ethereum object doesn't exist!\")\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Getdata;\r\n"]},"metadata":{},"sourceType":"module"}